<?php defined('BASEPATH') OR exit('No direct script access allowed');

require_once APPPATH . 'third_party/community_auth/core/Auth_Controller.php';

class MY_Controller extends Auth_Controller
{
  protected $login_theme;
  protected $base_theme;
  protected $modules;

  public $data = array();

  public $main_warehouse;
  public $user_base;

  public function __construct()
  {
    parent::__construct();

    $this->verify_min_level(1);

    $this->config->load('app_config');
    $this->config->load('app_kernel');
    $this->config->load('tables');

    $this->load->helper('form');
    $this->load->helper('date');
    $this->load->model('app_model', '_model');

    $this->modules        = config_item('module');
    $this->main_warehouse = $this->main_warehouse();
    $this->user_base      = $this->user_base();

    $this->data['modules']        = $this->modules;
    $this->data['close_url']      = site_url();
    $this->data['main_warehouse'] = $this->main_warehouse;
    $this->data['user_base']      = $this->user_base;

    $this->data['page']['requirement']  = array();

    $this->login_theme  = 'admin_lte/login';
    $this->base_theme   = config_item('theme_path') . '/page';
    $this->pdf_theme    = config_item('theme_path') . '/pdf';
    $this->form_theme   = config_item('theme_path') . '/form';
    $this->table_theme  = config_item('theme_path') . '/table';

    $this->config->set_item('main_warehouse', $this->main_warehouse);
    $this->config->set_item('auth_warehouses', $this->auth_warehouses());
    $this->config->set_item('auth_inventory', $this->auth_inventory());
    $this->config->set_item('period_year', get_setting('ACTIVE_YEAR'));
    $this->config->set_item('period_month', get_setting('ACTIVE_MONTH'));
  }

  public function has_role($module, $roles)
  {
    if ( isset($module['permission'][$roles]) && in_array(config_item('auth_role'), (array)explode(',', $module['permission'][$roles])) )
      return TRUE;

    return FALSE;
  }

  public function authorized($module, $roles = NULL)
  {
    if ($this->verify_min_level(1) == FALSE)
      redirect(site_url('login'));

    if ($this->main_warehouse() == NULL || config_item('maintenance') == TRUE)
      redirect(site_url('secure/maintenance'));

    if ($roles === NULL)
      return TRUE;

    if (is_array($roles) ){
      foreach ($roles as $role) {
        if ( $this->has_role($module, $role) === FALSE ){
          continue;
        } else{
          return TRUE;
          break;
        }
      }

      redirect(site_url('secure/denied'));
    } else {
      if ($this->has_role($module, $roles) === FALSE)
        redirect(site_url('secure/denied'));
    }

    $this->data['page']['role'] = $roles;

    return TRUE;
  }

  protected function main_warehouse()
  {
    $this->db->select('setting_value');
    $this->db->from('tb_settings');
    $this->db->where('setting_name', 'MAIN BASE');
    $query = $this->db->get();

    $warehouse = $query->unbuffered_row();

    return $warehouse->setting_value;
  }

  protected function user_base()
  {
    if (config_item('auth_warehouse') === $this->main_warehouse){
      return 'main_warehouse';
    } else {
      return 'out_base';
    }
  }

  protected function auth_warehouses()
  {
    $return = array();

    if (config_item('auth_role') == 'PIC STOCK'){
      $return[] = config_item('auth_warehouse');
    } else {
      $this->db->select('warehouse');
      $this->db->from('tb_master_warehouses');

      $query = $this->db->get();
      $result = $query->result_array();

      foreach ($result as $row) {
        $return[] = $row['warehouse'];
      }
    }

    return $return;
  }

  protected function auth_inventory()
  {
    if (config_item('auth_role') === 'PIC STOCK'){
      $this->db->select('category');
      $this->db->from('tb_auth_user_categories');
      $this->db->where('username', config_item('auth_username'));
    } else {
      $this->db->select('category');
      $this->db->from('tb_master_item_categories');
      $this->db->order_by('category', 'ASC');
    }

    $query  = $this->db->get();
    $result = $query->result_array();
    $return = array();

    foreach ($result as $row) {
      $return[] = $row['category'];
    }

    return $return;
  }

  protected function cell_string($string, $emptyString = 'N/A')
  {
    if (empty($string))
      $string = $emptyString;

    return $string;
  }

  protected function cell_date($date)
  {
    if (empty($date))
      $date = 'N/A';

    return nice_date($date, 'F d, Y');
  }

  protected function cell_numeric($number, $decimal = 0)
  {
    if (empty($number))
      $number = 0;

    return '<span style="display:block; text-align:right">'. number_format($number, $decimal) .'</span>';
  }

  protected function cell_config($config, $data)
  {
    if (empty($data)){
      return 'N/A';
    }

    $conf = config_item($config);

    return $conf[$data];
  }

  protected function pretty_dump($variable)
  {
    echo '<pre>';

    print_r($variable);

    echo '</pre>';

    exit();
  }

  protected function render_view($theme = NULL, $data = NULL, $print = FALSE)
  {
    if ($data === NULL)
      $data = $this->data;

    if ($theme === NULL)
      $theme = $this->base_theme;

    $this->load->view($theme, $data, $print);
  }

  protected function render_maintenance()
  {
    if ($this->require_min_level(1))
    {
      $data['page_content'] = '_modules/secure/maintenance';
      $data['page_header'] = 'Resticted';
      $data['page_title'] = 'Under Maintenance';
      $data['page_desc'] = NULL;

      $this->render_view('admin_lte/dashboard', $data);
    }
  }

  protected function render_alert($message, $type = 'info', $dismissable = TRUE)
  {
    $html = '<div class="alert alert-'.$type.' alert-dismissable">';

    if ($dismissable === TRUE)
      $html .= '<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>';

    $html .= nl2br($message);
    $html .= '</div>';

    return $html;
  }

  protected function monthName($month, $case = NULL)
  {
    $month = intval($month);

    switch ($month) {
      case 1:
      case 01:
        $print = 'January';
        break;

      case 2:
      case 02:
        $print = 'February';
        break;

      case 3:
      case 04:
        $print = 'March';
        break;

      case 4:
      case 04:
        $print = 'April';
        break;

      case 5:
      case 05:
        $print = 'May';
        break;

      case 6:
      case 06:
        $print = 'June';
        break;

      case 7:
      case 07:
        $print = 'July';
        break;

      case 8:
      case 08:
        $print = 'August';
        break;

      case 9:
      case 09:
        $print = 'September';
        break;

      case 10:
        $print = 'October';
        break;

      case 11:
        $print = 'November';
        break;

      case 12:
        $print = 'December';
        break;
    }

    if ($case == 'uppercase'){
      $print = strtoupper($print);
    } else if ($case == 'lowercase') {
      $print = strtolower($print);
    }

    return $print;
  }
}
